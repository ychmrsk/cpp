pointer : data type that has address

Type var = 'x'
Type* ptr = &var

// *ptr == 'x'
*ptr = 'y'
// *ptr == 'y'

delete p;
delete[] p;


destructor
~class_name()

リソースを所有するクラスはすべてデストラクタを必要とする。

デストラクタはオブジェクトが削除されるときに、
スコープを外れることにより、deleteにより、またはその他の理由で、
呼び出される。

void* 型は、コンパイラが型を知らないメモリへのポインタを意味する。

type* ptr = static_cast<type*>(p);


************************************************************
ポインタと参照
************************************************************
+ ポインタへの代入は、ポイントされる値ではなく、ポインタの値を変更する。
+ ポインタを取得するには、一般にnewまたは&を使用する必要がある。
+ ポインタによってポイントされるオブジェクトにアクセスするには、*または[]を使用する。
+ 参照への代入は、参照そのものではなく、その参照先のオブジェクトの値を変更する。
+ 参照への代入ではディープコピーが実行される。ポイントの代入ではディープコピーは実行されない。
+ nullポインタに注意

+ オブジェクトが小さい場合は値渡しを選択する
+ 「オブジェクトなし」が有効な引数である関数には、ポインタパラメータを使用する
+ それ以外の場合は、参照パラメータを使用する


